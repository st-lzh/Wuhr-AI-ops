'use client'

import React, { useState, useEffect } from 'react'
import {
  Card,
  Form,
  Input,
  Button,
  Space,
  Typography,
  Row,
  Col,
  message,
  Spin,
  Switch,
  Select,
  Table,
  Modal,
  Tag,
  Collapse,
  Divider,
  Alert,
  Badge,
  Tooltip,
  Upload,
  Popconfirm
} from 'antd'
import {
  ToolOutlined,
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  CheckOutlined,
  CloseOutlined,
  ApiOutlined,
  SettingOutlined,
  ReloadOutlined,
  ExclamationCircleOutlined,
  InfoCircleOutlined,
  CodeOutlined,
  UploadOutlined,
  FileOutlined,
  BugOutlined,
  ExperimentOutlined,
  CopyOutlined  // üîß Êñ∞Â¢ûÂ§çÂà∂ÂõæÊ†á
} from '@ant-design/icons'

const { Title, Text } = Typography
const { Panel } = Collapse
const { TextArea } = Input
const { Option } = Select

interface CustomTool {
  id: string
  name: string
  description: string
  command: string
  args: string[]
  workingDirectory?: string
  env: Record<string, string>
  category: string
  version: string
  isActive: boolean
  timeout: number
  inputSchema: any
  outputSchema: any
  examples: string[]
  tags: string[]
  createdAt: string
  updatedAt: string
}

interface CustomToolsConfig {
  enabled: boolean
  tools: CustomTool[]
  defaultTimeout: number
  maxConcurrency: number
  logLevel: 'debug' | 'info' | 'warn' | 'error'
}

const TOOL_CATEGORIES = [
  { value: 'system', label: 'Á≥ªÁªüÂ∑•ÂÖ∑', color: 'blue' },
  { value: 'development', label: 'ÂºÄÂèëÂ∑•ÂÖ∑', color: 'green' },
  { value: 'database', label: 'Êï∞ÊçÆÂ∫ìÂ∑•ÂÖ∑', color: 'purple' },
  { value: 'network', label: 'ÁΩëÁªúÂ∑•ÂÖ∑', color: 'orange' },
  { value: 'security', label: 'ÂÆâÂÖ®Â∑•ÂÖ∑', color: 'red' },
  { value: 'analytics', label: 'ÂàÜÊûêÂ∑•ÂÖ∑', color: 'cyan' },
  { value: 'automation', label: 'Ëá™Âä®ÂåñÂ∑•ÂÖ∑', color: 'yellow' },
  { value: 'custom', label: 'Ëá™ÂÆö‰πâÂ∑•ÂÖ∑', color: 'gray' }
]

const CustomToolsConfig: React.FC = () => {
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [config, setConfig] = useState<CustomToolsConfig>({
    enabled: false,
    tools: [],
    defaultTimeout: 30000,
    maxConcurrency: 5,
    logLevel: 'info'
  })
  const [modalVisible, setModalVisible] = useState(false)
  const [editingTool, setEditingTool] = useState<CustomTool | null>(null)
  const [form] = Form.useForm()
  const [testing, setTesting] = useState<string[]>([])

  // Ëé∑ÂèñËá™ÂÆö‰πâÂ∑•ÂÖ∑ÈÖçÁΩÆ
  const fetchCustomToolsConfig = async () => {
    setLoading(true)
    try {
      const response = await fetch('/api/config/custom-tools')
      const data = await response.json()

      if (data.success) {
        setConfig(data.data)
        console.log('üîß [CustomToolsConfig] ÈÖçÁΩÆÂ∑≤‰ªéÊï∞ÊçÆÂ∫ìÂä†ËΩΩ:', data.data)
      } else {
        message.error('Ëé∑ÂèñËá™ÂÆö‰πâÂ∑•ÂÖ∑ÈÖçÁΩÆÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('Ëé∑ÂèñËá™ÂÆö‰πâÂ∑•ÂÖ∑ÈÖçÁΩÆÂ§±Ë¥•:', error)
      message.error('Ëé∑ÂèñËá™ÂÆö‰πâÂ∑•ÂÖ∑ÈÖçÁΩÆÂ§±Ë¥•')
    } finally {
      setLoading(false)
    }
  }

  // ‰øùÂ≠òËá™ÂÆö‰πâÂ∑•ÂÖ∑ÈÖçÁΩÆ
  const saveCustomToolsConfig = async (newConfig: CustomToolsConfig) => {
    setSaving(true)
    try {
      const response = await fetch('/api/config/custom-tools', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newConfig)
      })

      const data = await response.json()

      if (data.success) {
        message.success('Ëá™ÂÆö‰πâÂ∑•ÂÖ∑ÈÖçÁΩÆ‰øùÂ≠òÊàêÂäü')
        setConfig(newConfig)
        console.log('üîß [CustomToolsConfig] ÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ì:', newConfig)
      } else {
        message.error(data.error || '‰øùÂ≠òÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('‰øùÂ≠òËá™ÂÆö‰πâÂ∑•ÂÖ∑ÈÖçÁΩÆÂ§±Ë¥•:', error)
      message.error('‰øùÂ≠òÂ§±Ë¥•')
    } finally {
      setSaving(false)
    }
  }

  // ÊµãËØïËá™ÂÆö‰πâÂ∑•ÂÖ∑
  const testCustomTool = async (tool: CustomTool) => {
    setTesting([...testing, tool.id])
    try {
      const response = await fetch('/api/config/custom-tools/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: tool.name,
          command: tool.command,
          args: tool.args,
          env: tool.env,
          workingDirectory: tool.workingDirectory,
          timeout: tool.timeout
        })
      })
      
      const data = await response.json()
      
      if (data.success) {
        message.success(`Â∑•ÂÖ∑ "${tool.name}" ÊµãËØïÊàêÂäü`)
      } else {
        message.error(`Â∑•ÂÖ∑ "${tool.name}" ÊµãËØïÂ§±Ë¥•: ${data.error}`)
      }
    } catch (error) {
      console.error('ÊµãËØïÂ∑•ÂÖ∑Â§±Ë¥•:', error)
      message.error('ÊµãËØïÂ∑•ÂÖ∑Â§±Ë¥•')
    } finally {
      setTesting(testing.filter(id => id !== tool.id))
    }
  }

  // Ê∑ªÂä†ÊàñÁºñËæëÂ∑•ÂÖ∑
  const handleToolSubmit = (values: any) => {
    try {
      const toolData: CustomTool = {
        id: editingTool?.id || `tool_${Date.now()}`,
        name: values.name,
        description: values.description,
        command: values.command,
        args: values.args ? values.args.split(' ').filter((arg: string) => arg.trim()) : [],
        workingDirectory: values.workingDirectory,
        env: values.env ? JSON.parse(values.env) : {},
        category: values.category,
        version: values.version || '1.0.0',
        isActive: values.isActive !== false,
        timeout: values.timeout || config.defaultTimeout,
        inputSchema: values.inputSchema ? JSON.parse(values.inputSchema) : {},
        outputSchema: values.outputSchema ? JSON.parse(values.outputSchema) : {},
        examples: values.examples ? values.examples.split('\n').filter((ex: string) => ex.trim()) : [],
        tags: values.tags || [],
        createdAt: editingTool?.createdAt || new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }

      let updatedTools: CustomTool[]
      if (editingTool) {
        updatedTools = config.tools.map(t => t.id === editingTool.id ? toolData : t)
        message.success('Â∑•ÂÖ∑ÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞')
      } else {
        updatedTools = [...config.tools, toolData]
        message.success('Â∑•ÂÖ∑ÈÖçÁΩÆÂ∑≤Ê∑ªÂä†')
      }

      const newConfig = { ...config, tools: updatedTools }
      setConfig(newConfig)
      setModalVisible(false)
      setEditingTool(null)
      form.resetFields()

      // Ëá™Âä®‰øùÂ≠òÈÖçÁΩÆ
      saveCustomToolsConfig(newConfig)
    } catch (error) {
      console.error('‰øùÂ≠òÂ∑•ÂÖ∑ÈÖçÁΩÆÂ§±Ë¥•:', error)
      message.error('‰øùÂ≠òÂ∑•ÂÖ∑ÈÖçÁΩÆÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•JSONÊ†ºÂºè')
    }
  }

  // Âà†Èô§Â∑•ÂÖ∑
  const deleteTool = (toolId: string) => {
    const updatedTools = config.tools.filter(t => t.id !== toolId)
    const newConfig = { ...config, tools: updatedTools }
    setConfig(newConfig)
    saveCustomToolsConfig(newConfig)
    message.success('Â∑•ÂÖ∑ÈÖçÁΩÆÂ∑≤Âà†Èô§')
  }

  // ÂàáÊç¢Â∑•ÂÖ∑ÂêØÁî®Áä∂ÊÄÅ
  const toggleToolActive = (toolId: string) => {
    const updatedTools = config.tools.map(t => 
      t.id === toolId ? { ...t, isActive: !t.isActive } : t
    )
    const newConfig = { ...config, tools: updatedTools }
    setConfig(newConfig)
    saveCustomToolsConfig(newConfig)
  }

  // ÊâìÂºÄÁºñËæëÊ®°ÊÄÅÊ°Ü
  const openEditModal = (tool: CustomTool | null = null) => {
    setEditingTool(tool)
    if (tool) {
      form.setFieldsValue({
        name: tool.name,
        description: tool.description,
        command: tool.command,
        args: Array.isArray(tool.args) ? tool.args.join(' ') : '',
        workingDirectory: tool.workingDirectory,
        env: JSON.stringify(tool.env || {}, null, 2),
        category: tool.category,
        version: tool.version,
        isActive: tool.isActive,
        timeout: tool.timeout,
        inputSchema: JSON.stringify(tool.inputSchema || {}, null, 2),
        outputSchema: JSON.stringify(tool.outputSchema || {}, null, 2),
        examples: Array.isArray(tool.examples) ? tool.examples.join('\n') : '',
        tags: Array.isArray(tool.tags) ? tool.tags : []
      })
    } else {
      form.resetFields()
    }
    setModalVisible(true)
  }

  // ÂØºÂá∫ÈÖçÁΩÆ
  const exportConfig = () => {
    const dataStr = JSON.stringify(config, null, 2)
    const dataBlob = new Blob([dataStr], { type: 'application/json' })
    const url = URL.createObjectURL(dataBlob)
    const link = document.createElement('a')
    link.href = url
    link.download = `custom-tools-config-${new Date().toISOString().split('T')[0]}.json`
    link.click()
    URL.revokeObjectURL(url)
  }

  // üîß Â§çÂà∂Â∑•ÂÖ∑ÂêçÁß∞Âà∞Ââ™Ë¥¥ÊùøÔºàÁî®‰∫éËæìÂÖ•Ê°ÜÔºâ
  const copyToolToInput = async (tool: CustomTool) => {
    try {
      // Â§çÂà∂Â∑•ÂÖ∑ÂêçÁß∞ÊàñÊèèËø∞ÊÄßÊñáÊú¨
      const textToCopy = `‰ΩøÁî®${tool.name}Â∑•ÂÖ∑`
      await navigator.clipboard.writeText(textToCopy)
      message.success(`Â∑≤Â§çÂà∂"${textToCopy}"Âà∞Ââ™Ë¥¥ÊùøÔºåÂèØÁõ¥Êé•Á≤òË¥¥Âà∞ËæìÂÖ•Ê°Ü`)
    } catch (error) {
      console.error('Â§çÂà∂Â§±Ë¥•:', error)
      message.error('Â§çÂà∂Â§±Ë¥•ÔºåËØ∑ÊâãÂä®ËæìÂÖ•')
    }
  }

  // Â∑•ÂÖ∑Ë°®Ê†ºÂàó
  const toolColumns = [
    {
      title: 'Â∑•ÂÖ∑ÂêçÁß∞',
      dataIndex: 'name',
      key: 'name',
      render: (name: string, record: CustomTool) => (
        <Space>
          <Tooltip title={record.isActive ? 'Â∑•ÂÖ∑Â∑≤ÂêØÁî®' : 'Â∑•ÂÖ∑Â∑≤Á¶ÅÁî®'}>
            <Badge
              status={record.isActive ? 'success' : 'default'}
              dot
            />
          </Tooltip>
          <CodeOutlined />
          <Tooltip title="ÁÇπÂáªÂ§çÂà∂Âà∞ËæìÂÖ•Ê°Ü">
            <Text
              strong
              className="cursor-pointer hover:text-blue-500 transition-colors"
              onClick={() => copyToolToInput(record)}
            >
              {name}
            </Text>
          </Tooltip>
        </Space>
      )
    },
    {
      title: 'ÊèèËø∞',
      dataIndex: 'description',
      key: 'description',
      render: (desc: string) => (
        <Text type="secondary" ellipsis={{ tooltip: desc }}>
          {desc}
        </Text>
      )
    },
    {
      title: 'ÂàÜÁ±ª',
      dataIndex: 'category',
      key: 'category',
      render: (category: string) => {
        const categoryConfig = TOOL_CATEGORIES.find(c => c.value === category)
        return (
          <Tag color={categoryConfig?.color || 'default'}>
            {categoryConfig?.label || category}
          </Tag>
        )
      }
    },
    {
      title: 'ÁâàÊú¨',
      dataIndex: 'version',
      key: 'version',
      render: (version: string) => <Text code>{version}</Text>
    },
    {
      title: 'Áä∂ÊÄÅ',
      dataIndex: 'isActive',
      key: 'isActive',
      render: (isActive: boolean, record: CustomTool) => (
        <Switch
          checked={isActive}
          onChange={() => toggleToolActive(record.id)}
          size="small"
        />
      )
    },
    {
      title: 'Êìç‰Ωú',
      key: 'action',
      render: (_: any, record: CustomTool) => (
        <Space size="small">
          <Tooltip title="Â§çÂà∂Âà∞ËæìÂÖ•Ê°Ü">
            <Button
              size="small"
              icon={<CopyOutlined />}
              onClick={() => copyToolToInput(record)}
            >
              Â§çÂà∂
            </Button>
          </Tooltip>
          <Button
            size="small"
            icon={<BugOutlined />}
            onClick={() => testCustomTool(record)}
            loading={testing.includes(record.id)}
          >
            ÊµãËØï
          </Button>
          <Button
            size="small"
            icon={<EditOutlined />}
            onClick={() => openEditModal(record)}
          >
            ÁºñËæë
          </Button>
          <Popconfirm
            title="Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™Â∑•ÂÖ∑ÂêóÔºü"
            onConfirm={() => deleteTool(record.id)}
          >
            <Button
              size="small"
              danger
              icon={<DeleteOutlined />}
            >
              Âà†Èô§
            </Button>
          </Popconfirm>
        </Space>
      )
    }
  ]

  useEffect(() => {
    fetchCustomToolsConfig()
  }, [])

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Spin size="large" />
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* È°µÈù¢Ê†áÈ¢ò */}
      <div>
        <Title level={3} className="!text-white !mb-2">
          <CodeOutlined className="mr-2" />
          Ëá™ÂÆö‰πâÂ∑•ÂÖ∑ÈÖçÁΩÆ
        </Title>
        <Text className="text-gray-400">
          ÈÖçÁΩÆÂíåÁÆ°ÁêÜËá™ÂÆö‰πâÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑ÂíåËÑöÊú¨
        </Text>
      </div>

      {/* ÂÖ®Â±ÄËÆæÁΩÆ */}
      <Card title="ÂÖ®Â±ÄËÆæÁΩÆ" className="glass-card">
        <Row gutter={24}>
          <Col span={6}>
            <div className="flex items-center justify-between">
              <div>
                <Text strong className="text-white">ÂêØÁî®Ëá™ÂÆö‰πâÂ∑•ÂÖ∑</Text>
                <div className="text-xs text-gray-400 mt-1">
                  ÂêØÁî®ÂêéÂèØ‰ª•‰ΩøÁî®ÈÖçÁΩÆÁöÑËá™ÂÆö‰πâÂ∑•ÂÖ∑
                </div>
              </div>
              <Switch
                checked={config.enabled}
                onChange={(enabled) => {
                  const newConfig = { ...config, enabled }
                  setConfig(newConfig)
                  saveCustomToolsConfig(newConfig)
                }}
                loading={saving}
              />
            </div>
          </Col>
          <Col span={6}>
            <div>
              <Text strong className="text-white block mb-1">ÈªòËÆ§Ë∂ÖÊó∂Êó∂Èó¥</Text>
              <Input
                type="number"
                value={config.defaultTimeout / 1000}
                onChange={(e) => {
                  const timeout = parseInt(e.target.value) * 1000
                  const newConfig = { ...config, defaultTimeout: timeout }
                  setConfig(newConfig)
                }}
                onBlur={() => saveCustomToolsConfig(config)}
                suffix="Áßí"
                size="small"
              />
            </div>
          </Col>
          <Col span={6}>
            <div>
              <Text strong className="text-white block mb-1">ÊúÄÂ§ßÂπ∂ÂèëÊï∞</Text>
              <Input
                type="number"
                value={config.maxConcurrency}
                onChange={(e) => {
                  const maxConcurrency = parseInt(e.target.value)
                  const newConfig = { ...config, maxConcurrency }
                  setConfig(newConfig)
                }}
                onBlur={() => saveCustomToolsConfig(config)}
                size="small"
                min="1"
                max="20"
              />
            </div>
          </Col>
          <Col span={6}>
            <div>
              <Text strong className="text-white block mb-1">Êó•ÂøóÁ∫ßÂà´</Text>
              <Select
                value={config.logLevel}
                onChange={(logLevel) => {
                  const newConfig = { ...config, logLevel }
                  setConfig(newConfig)
                  saveCustomToolsConfig(newConfig)
                }}
                size="small"
                className="w-full"
              >
                <Option value="debug">Ë∞ÉËØï</Option>
                <Option value="info">‰ø°ÊÅØ</Option>
                <Option value="warn">Ë≠¶Âëä</Option>
                <Option value="error">ÈîôËØØ</Option>
              </Select>
            </div>
          </Col>
        </Row>

        {!config.enabled && (
          <Alert
            className="mt-4"
            message="Ëá™ÂÆö‰πâÂ∑•ÂÖ∑ÂäüËÉΩÂ∑≤Á¶ÅÁî®"
            description="ÂêØÁî®Ëá™ÂÆö‰πâÂ∑•ÂÖ∑ÂäüËÉΩÂêéÔºåAIÂä©ÊâãÂèØ‰ª•Ë∞ÉÁî®ÈÖçÁΩÆÁöÑÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑„ÄÇ"
            type="info"
            showIcon
          />
        )}
      </Card>

      {/* Ëá™ÂÆö‰πâÂ∑•ÂÖ∑ÂàóË°® */}
      <Card
        title={
          <Space>
            <CodeOutlined />
            <span>Ëá™ÂÆö‰πâÂ∑•ÂÖ∑</span>
            <Badge count={config.tools.length} color="blue" />
            <Badge count={config.tools.filter(t => t.isActive).length} color="green" />
          </Space>
        }
        extra={
          <Space>
            <Button
              icon={<UploadOutlined />}
              onClick={exportConfig}
              size="small"
            >
              ÂØºÂá∫ÈÖçÁΩÆ
            </Button>
            <Button
              icon={<ReloadOutlined />}
              onClick={() => fetchCustomToolsConfig()}
              loading={loading}
              size="small"
            >
              Âà∑Êñ∞
            </Button>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => openEditModal()}
              disabled={!config.enabled}
            >
              Ê∑ªÂä†Â∑•ÂÖ∑
            </Button>
          </Space>
        }
        className="glass-card"
      >
        {config.tools.length === 0 ? (
          <div className="text-center py-12">
            <CodeOutlined className="text-4xl text-gray-500 mb-4" />
            <Text className="text-gray-400 block mb-4">
              Â∞öÊú™ÈÖçÁΩÆËá™ÂÆö‰πâÂ∑•ÂÖ∑
            </Text>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => openEditModal()}
              disabled={!config.enabled}
            >
              Ê∑ªÂä†Á¨¨‰∏Ä‰∏™Â∑•ÂÖ∑
            </Button>
          </div>
        ) : (
          <Table
            columns={toolColumns}
            dataSource={config.tools}
            rowKey="id"
            pagination={{ pageSize: 10 }}
            size="small"
            scroll={{ x: 1200 }}
          />
        )}
      </Card>

      {/* Ê∑ªÂä†/ÁºñËæëÂ∑•ÂÖ∑Ê®°ÊÄÅÊ°Ü */}
      <Modal
        title={editingTool ? 'ÁºñËæëËá™ÂÆö‰πâÂ∑•ÂÖ∑' : 'Ê∑ªÂä†Ëá™ÂÆö‰πâÂ∑•ÂÖ∑'}
        open={modalVisible}
        onCancel={() => {
          setModalVisible(false)
          setEditingTool(null)
          form.resetFields()
        }}
        footer={null}
        width={800}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleToolSubmit}
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="name"
                label="Â∑•ÂÖ∑ÂêçÁß∞"
                rules={[
                  { required: true, message: 'ËØ∑ËæìÂÖ•Â∑•ÂÖ∑ÂêçÁß∞' },
                  { max: 50, message: 'ÂêçÁß∞‰∏çËÉΩË∂ÖËøá50‰∏™Â≠óÁ¨¶' }
                ]}
              >
                <Input placeholder="‰æãÂ¶Ç: kubectl-analyzer" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="category"
                label="Â∑•ÂÖ∑ÂàÜÁ±ª"
                rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©Â∑•ÂÖ∑ÂàÜÁ±ª' }]}
              >
                <Select placeholder="ÈÄâÊã©ÂàÜÁ±ª">
                  {TOOL_CATEGORIES.map(cat => (
                    <Option key={cat.value} value={cat.value}>
                      {cat.label}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="description"
            label="Â∑•ÂÖ∑ÊèèËø∞"
            rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Â∑•ÂÖ∑ÊèèËø∞' }]}
          >
            <TextArea rows={2} placeholder="ËØ¶ÁªÜÊèèËø∞Â∑•ÂÖ∑ÁöÑÂäüËÉΩÂíåÁî®ÈÄî" />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="command"
                label="ÂëΩ‰ª§"
                rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•ÂëΩ‰ª§' }]}
              >
                <Input placeholder="‰æãÂ¶Ç: python3" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="args"
                label="ÂèÇÊï∞"
                extra="Â§ö‰∏™ÂèÇÊï∞Áî®Á©∫Ê†ºÂàÜÈöî"
              >
                <Input placeholder="‰æãÂ¶Ç: analyze.py --verbose" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="version"
                label="ÁâàÊú¨Âè∑"
              >
                <Input placeholder="‰æãÂ¶Ç: 1.0.0" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="timeout"
                label="Ë∂ÖÊó∂Êó∂Èó¥(Áßí)"
              >
                <Input type="number" placeholder="30" />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="workingDirectory"
            label="Â∑•‰ΩúÁõÆÂΩï"
            extra="ÂèØÈÄâÔºåÊåáÂÆöÂëΩ‰ª§ÊâßË°åÁöÑÂ∑•‰ΩúÁõÆÂΩï"
          >
            <Input placeholder="/path/to/working/directory" />
          </Form.Item>

          <Form.Item
            name="env"
            label="ÁéØÂ¢ÉÂèòÈáè"
            extra={'JSONÊ†ºÂºèÔºå‰æãÂ¶Ç: {"API_KEY": "your-key"}'}
          >
            <TextArea 
              rows={3}
              placeholder='{"API_KEY": "your-api-key", "DEBUG": "true"}'
            />
          </Form.Item>

          <Form.Item
            name="tags"
            label="Ê†áÁ≠æ"
            extra="Áî®‰∫éÂ∑•ÂÖ∑ÂàÜÁªÑÂíåÊêúÁ¥¢"
          >
            <Select
              mode="tags"
              placeholder="ËæìÂÖ•Ê†áÁ≠æÊåâÂõûËΩ¶Ê∑ªÂä†"
              style={{ width: '100%' }}
            />
          </Form.Item>

          <Collapse ghost>
            <Panel header="È´òÁ∫ßÈÖçÁΩÆ" key="advanced">
              <Form.Item
                name="inputSchema"
                label="ËæìÂÖ•ÁªìÊûÑ"
                extra="JSON SchemaÊ†ºÂºèÔºåÂÆö‰πâÂ∑•ÂÖ∑ËæìÂÖ•ÂèÇÊï∞ÁªìÊûÑ"
              >
                <TextArea 
                  rows={4}
                  placeholder='{"type": "object", "properties": {"param1": {"type": "string"}}}'
                />
              </Form.Item>

              <Form.Item
                name="outputSchema"
                label="ËæìÂá∫ÁªìÊûÑ"
                extra="JSON SchemaÊ†ºÂºèÔºåÂÆö‰πâÂ∑•ÂÖ∑ËæìÂá∫ÁªìÊûÑ"
              >
                <TextArea 
                  rows={4}
                  placeholder='{"type": "object", "properties": {"result": {"type": "string"}}}'
                />
              </Form.Item>

              <Form.Item
                name="examples"
                label="‰ΩøÁî®Á§∫‰æã"
                extra="ÊØèË°å‰∏Ä‰∏™Á§∫‰æãÔºåÁî®‰∫éÂ∑•ÂÖ∑ÊñáÊ°£"
              >
                <TextArea 
                  rows={3}
                  placeholder="analyze --type=pods --namespace=default&#10;analyze --help"
                />
              </Form.Item>

              <Form.Item
                name="isActive"
                label="ÂêØÁî®Áä∂ÊÄÅ"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </Panel>
          </Collapse>

          <div className="flex justify-end space-x-2 mt-4">
            <Button onClick={() => setModalVisible(false)}>
              ÂèñÊ∂à
            </Button>
            <Button type="primary" htmlType="submit">
              {editingTool ? 'Êõ¥Êñ∞' : 'Ê∑ªÂä†'}
            </Button>
          </div>
        </Form>
      </Modal>
    </div>
  )
}

export default CustomToolsConfig